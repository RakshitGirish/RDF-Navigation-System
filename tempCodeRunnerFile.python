class Node:
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev


    def setData(self, data):
        self.data = data


    def getData(self):
        return self.data


    def setNext(self, next):
        self.next = next


    def getNext(self):
        return self.next


    def hasNext(self):
        return self.next is not None


    def setPrev(self, prev):
        self.prev = prev


    def getPrev(self):
        return self.prev


    def hasPrev(self):
        return self.prev is not None


    def __str__(self):
        return f"Node[Data = {self.data}]"




class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None


    def insertAtBeginning(self, data):
        newNode = Node(data)
        if self.head is None:
            self.head = self.tail = newNode
        else:
            newNode.setNext(self.head)
            self.head.setPrev(newNode)
            self.head = newNode


    def insertAtEnd(self, data):
        newNode = Node(data)
        if self.head is None:
            self.head = self.tail = newNode
        else:
            self.tail.setNext(newNode)
            newNode.setPrev(self.tail)
            self.tail = newNode


    def getNode(self, index):
        currentNode = self.head
        i = 0
        while i < index and currentNode is not None:
            currentNode = currentNode.getNext()
            i += 1
        return currentNode


    def insertAtGivenPosition(self, index, data):
        if index == 0:
            self.insertAtBeginning(data)
        else:
            temp = self.getNode(index)
            if temp is None:
                self.insertAtEnd(data)
            else:
                newNode = Node(data)
                prevNode = temp.getPrev()
                if prevNode:
                    prevNode.setNext(newNode)
                newNode.setPrev(prevNode)
                newNode.setNext(temp)
                temp.setPrev(newNode)
                if temp == self.head:
                    self.head = newNode


    def deleteAtGivenPosition(self, index):
        temp = self.getNode(index)
        if temp is None:
            return
        if temp.getPrev():
            temp.getPrev().setNext(temp.getNext())
        else:
            self.head = temp.getNext()
        if temp.getNext():
            temp.getNext().setPrev(temp.getPrev())
        else:
            self.tail = temp.getPrev()


    def deleteWithData(self, data):
        temp = self.head
        while temp is not None:
            if temp.getData() == data:
                if temp.getPrev():
                    temp.getPrev().setNext(temp.getNext())
                else:
                    self.head = temp.getNext()
                if temp.getNext():
                    temp.getNext().setPrev(temp.getPrev())
                else:
                    self.tail = temp.getPrev()
                return
            temp = temp.getNext()


    def displayForward(self):
        current = self.head
        while current is not None:
            print(current.getData(), end=" <-> ")
            current = current.getNext()
        print("None")


    def displayBackward(self):
        current = self.tail
        while current is not None:
            print(current.getData(), end=" <-> ")
            current = current.getPrev()
        print("None")


dll = DoublyLinkedList()
dll.insertAtBeginning(10)
dll.insertAtEnd(20)
dll.insertAtEnd(30)
dll.insertAtGivenPosition(1, 15)
dll.displayForward()     # Expected: 10 <-> 15 <-> 20 <-> 30 <-> None
dll.displayBackward()    # Expected: 30 <-> 20 <-> 15 <-> 10 <-> None


dll.deleteWithData(20)
dll.displayForward()     # Expected: 10 <-> 15 <-> 30 <-> None
